{"version":3,"sources":["theme.js","GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/themeSlice.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","styled.js","App.js","features/tasks/TasksPage/TasksList/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","serviceWorker.js","index.js"],"names":["theme","color","buttonBackground","sectionBackground","shadow","background","transparent","check","remove","edit","outline","interactionButtonText","text","breakpoint","mobileMax","mini","darkTheme","GlobalStyle","createGlobalStyle","FormSheet","styled","form","Button","button","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","isHidingEnabled","exampleTasksLoading","query","reducers","addTasks","payload","forEach","task","push","id","nanoid","toggleTaskDone","index","findIndex","done","deleteTask","state","filter","doAllTasks","map","removeAllTasks","toggleIsHidingEnabled","editTask","fetchExampleTasks","setExampleTasksLoading","setQuery","actions","selectTasks","selectIsHidingEnabled","selectExampleTasksLoading","selectQuery","input","Form","useState","newTaskName","setNewTaskName","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trim","Input","ref","value","onChange","target","autoFocus","placeholder","List","ul","Item","li","hidden","css","Content","span","toggleDone","save","EditableContent","div","ContentInput","StyledLink","Link","TasksList","useSelector","toLowerCase","includes","selectTasksByQuery","editableId","setEditableId","length","key","onClick","as","undefined","onEditSave","to","ButtonsContainer","Buttons","disabled","every","Wrapper","section","Title","h2","Container","Body","Section","title","extraHeaderContent","body","themeSlice","toggleTheme","selectDarkTheme","header","Header","isDarkTheme","Main","main","children","ExampleTasksButton","loading","Search","TasksPage","TaskPage","useParams","taskId","find","getTaskById","AuthorPage","StyledNavLink","NavLink","attrs","activeClassName","Nav","NavItem","App","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","watchAllActions","put","delay","call","exampleTasks","alert","select","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","themeReducer","middleware","run","subscribe","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.314a155b.chunk.js","sourcesContent":["export const theme = {\r\n    color: {\r\n        buttonBackground: \"teal\",\r\n        sectionBackground: \"#fff\",\r\n        shadow: \"#ccc\",\r\n        background: \"#eee\",\r\n        transparent: \"transparent\",\r\n        check: \"green\",\r\n        remove: \"red\",\r\n        edit: \"orange\",\r\n        outline: \"black\",\r\n        interactionButtonText: \"#fff\",\r\n        text: \"black\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        mini: 375,\r\n    },\r\n}\r\n\r\nexport const darkTheme = {\r\n    ...theme,\r\n    color: {\r\n        buttonBackground: \"#6CAAE0\",\r\n        sectionBackground: \"#3C4453\",\r\n        shadow: \"black\",\r\n        background: \"#272A30\",\r\n        transparent: \"transparent\",\r\n        check: \"green\",\r\n        remove: \"red\",\r\n        edit: \"orange\",\r\n        outline: \"grey\",\r\n        interactionButtonText: \"#fff\",\r\n        text: \"#EBEDEF\",\r\n    },\r\n}","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        background-color: ${({ theme }) => theme.color.background};\r\n    }\r\n\r\n    *, ::before, ::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    :focus {\r\n        outline: 2px solid ${({ theme }) => theme.color.outline};\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        color: ${({ theme }) => theme.color.text};\r\n        font-size: 16px;\r\n        background-color: ${({ theme }) => theme.color.background};\r\n        transition: background 0.3s;\r\n        height: 100vh;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const FormSheet = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\nexport const Button = styled.button`\r\n    height: 55px;\r\n    font-size: 20px;\r\n    background-color: ${({ theme }) => theme.color.buttonBackground};\r\n    color: ${({ theme }) => theme.color.sectionBackground};\r\n    border: none;\r\n    padding: 15px;\r\n    transition: background 0.3s, transform 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n`","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n};\r\n\r\nexport const getTasksFromLocalStorage = () => {\r\n    return JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n};","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        isHidingEnabled: false,\r\n        exampleTasksLoading: false,\r\n        query: \"\",\r\n    },\r\n    reducers: {\r\n        addTasks: ({ tasks }, { payload }) => {\r\n            payload.forEach(task => tasks.push({\r\n                ...task,\r\n                id: nanoid(),\r\n            }));\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteTask: (state, { payload }) => {\r\n            state.tasks = state.tasks.filter(task => task.id !== payload);\r\n        },\r\n        doAllTasks: (state) => {\r\n            state.tasks = state.tasks.map(task => ({ ...task, done: true }));\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        },\r\n        toggleIsHidingEnabled: state => {\r\n            state.isHidingEnabled = !state.isHidingEnabled;\r\n        },\r\n        editTask: ({ tasks }, { payload: { id, name } }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks[index].name = name;\r\n        },\r\n        fetchExampleTasks: () => {\r\n        },\r\n        setExampleTasksLoading: (state, { payload }) => {\r\n            state.exampleTasksLoading = payload;\r\n        },\r\n        setQuery: (state, { payload: query }) => {\r\n            state.query = query;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTasks,\r\n    toggleIsHidingEnabled,\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    doAllTasks,\r\n    removeAllTasks,\r\n    editTask,\r\n    fetchExampleTasks,\r\n    setExampleTasksLoading,\r\n    setQuery,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks.tasks;\r\nexport const selectIsHidingEnabled = state => state.tasks.isHidingEnabled;\r\nexport const selectExampleTasksLoading = state => state.tasks.exampleTasksLoading;\r\nexport const getTaskById = (state, taskId) => {\r\n    return selectTasks(state).find(({ id }) => id === taskId);\r\n};\r\nexport const selectQuery = state => state.tasks.query;\r\nexport const selectTasksByQuery = (state, query) => {\r\n    if (!query || query.trim() === \"\") {\r\n        return selectTasks(state);\r\n    }\r\n\r\n    return selectTasks(state).filter(\r\n        ({ name }) => name.toLowerCase().includes(query.trim().toLowerCase())\r\n    );\r\n};\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    width: 100%;\r\n    height: 55px;\r\n    border: 3px solid ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    color: ${({ theme }) => theme.color.text};\r\n    border: 1px solid ${({ theme }) => theme.color.shadow};\r\n`","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FormSheet, Button } from \"./styled\"\r\nimport { addTasks } from \"./../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        focusInput();\r\n\r\n        if (!newTaskName.trim()) {\r\n            return 0;\r\n        }\r\n\r\n        dispatch(addTasks({\r\n            name: newTaskName.trim(),\r\n            done: false,\r\n        }));\r\n        setNewTaskName(\"\");\r\n    }\r\n\r\n    return (\r\n        <FormSheet onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n                autoFocus\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormSheet>\r\n    )\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n`;\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid ${({ theme }) => theme.color.background};\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto ;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    color: ${({ theme }) => theme.color.interactionButtonText};\r\n    font-size: 22px;\r\n    padding: 0px;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.check};\r\n    `}\r\n    ${({ edit }) => edit && css`\r\n        background-color: ${({ theme }) => theme.color.edit};\r\n    `}\r\n    ${({ save }) => save && css`\r\n        background-color: ${({ theme }) => theme.color.edit};\r\n        font-size: unset;\r\n        width: unset;\r\n        padding: 0px 10px;\r\n    `}\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n`;\r\nexport const EditableContent = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n`;\r\nexport const ContentInput = styled.input`\r\n    width: 100%;\r\n    padding: 5px;\r\n    border: 1px solid ${({ theme }) => theme.color.shadow};\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    color: ${({ theme }) => theme.color.text};\r\n`;\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.color.buttonBackground};\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n`;","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    List,\r\n    Item,\r\n    Content,\r\n    Button,\r\n    EditableContent,\r\n    ContentInput,\r\n    StyledLink\r\n} from \"./styled.js\";\r\nimport {\r\n    selectTasksByQuery,\r\n    selectIsHidingEnabled,\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    editTask,\r\n    selectQuery,\r\n} from \"../../tasksSlice.js\";\r\n\r\nconst TasksList = () => {\r\n    const query = useSelector(selectQuery);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const isHidingEnabled = useSelector(selectIsHidingEnabled);\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n    const [editableId, setEditableId] = useState(0);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (!tasks.length) {\r\n        return (\r\n            <p>\r\n                {query\r\n                    ? \"Brak pasujących zadań.\"\r\n                    : \"Aktualnie nie masz żadnych zadań do wykonania. Ciesz się wolnym czasem :)\"\r\n                }\r\n            </p>\r\n        );\r\n    };\r\n\r\n    const onEditSave = (id, name) => {\r\n        dispatch(editTask({\r\n            name: newTaskName.trim() || name,\r\n            id,\r\n        }));\r\n\r\n        setEditableId(undefined);\r\n    };\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({ id, name, done }) => (\r\n                <Item\r\n                    key={id}\r\n                    hidden={done && isHidingEnabled}\r\n                >\r\n                    <Button toggleDone onClick={() => dispatch(toggleTaskDone(id))}>\r\n                        {done ? \"✔\" : \"\"}\r\n                    </Button>\r\n\r\n                    {editableId === id\r\n                        ? (\r\n                            <EditableContent as=\"form\">\r\n                                <ContentInput autoFocus value={newTaskName} onChange={({ target }) => setNewTaskName(target.value)} />\r\n                                <Button save onClick={() => onEditSave(id, name)}>\r\n                                    Zapisz\r\n                                </Button>\r\n                            </EditableContent>\r\n                        )\r\n                        : (\r\n                            <EditableContent>\r\n                                <Content done={done}>\r\n                                    <StyledLink to={`/zadania/${id}`}>{name}</StyledLink>\r\n                                </Content>\r\n                                <Button edit onClick={() => setEditableId(id) || setNewTaskName(name)}>\r\n                                    ✏\r\n                                </Button>\r\n                            </EditableContent>\r\n                        )\r\n                    }\r\n\r\n                    < Button remove onClick={() => dispatch(deleteTask(id))}>\r\n                        🗑\r\n                    </Button >\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        margin-bottom: 20px;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.transparent};\r\n    border: none;\r\n    padding: 20px;\r\n    color: ${({ theme }) => theme.color.buttonBackground};\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        padding: 15px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.shadow};\r\n        cursor: unset;\r\n        filter: none;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer} from \"./styled\";\r\nimport { Button } from \"./../styled\";\r\nimport {\r\n    selectTasks,\r\n    selectIsHidingEnabled,\r\n    toggleIsHidingEnabled,\r\n    doAllTasks,\r\n    removeAllTasks,\r\n} from \"./../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const isHidingEnabled = useSelector(selectIsHidingEnabled);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => !done)}\r\n                        onClick={() => dispatch(toggleIsHidingEnabled())}\r\n                    >\r\n                        {isHidingEnabled ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                        onClick={() => dispatch(doAllTasks())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(removeAllTasks())}\r\n                    >\r\n                        Usuń wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsContainer>\r\n    );\r\n};\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: ${({ theme }) => theme.color.sectionBackground};\r\n    margin-bottom: 15px;\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.shadow};\r\n`;\r\nexport const Title = styled.h2`\r\n    padding: 20px;\r\n    margin: 0;\r\n`;\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n    border-top: 3px solid ${({ theme }) => theme.color.background};\r\n`;","import React from \"react\";\r\nimport { Wrapper, Title, Container, Body } from \"./styled.js\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <Wrapper>\r\n        <Container>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n)\r\nexport default Section;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        darkTheme: JSON.parse(localStorage.getItem(\"theme\")) || false,\r\n    },\r\n    reducers: {\r\n        toggleTheme: (state) => {\r\n            state.darkTheme = !state.darkTheme;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\nexport const selectDarkTheme = state => state.theme.darkTheme;\r\nexport default themeSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media(max-width: 1100px) {\r\n        padding: 0 10px;\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mini}px ) {\r\n        flex-direction: column;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: ${({ theme }) => theme.color.sectionBackground};\r\n    color: ${({ theme }) => theme.color.text};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.shadow};\r\n    font-size: 1em;\r\n    display: block;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTheme, selectDarkTheme } from \"../themeSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Header = ({ title }) => {\r\n    const isDarkTheme = useSelector(selectDarkTheme);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Wrapper>\r\n            <h1>{title}</h1>\r\n            <Button onClick={() => dispatch(toggleTheme())}>\r\n                {isDarkTheme ? \"Jasny motyw\" : \"Ciemny motyw\"}\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    width: 1100px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n`","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n)\r\nexport default Container;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"./../styled\";\r\nimport { fetchExampleTasks, selectExampleTasksLoading } from \"./../../tasksSlice\";\r\n\r\nconst ExampleTasksButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectExampleTasksLoading);\r\n\r\n    return (\r\n        <Button\r\n            onClick={() => dispatch(fetchExampleTasks())}\r\n            disabled={loading}\r\n        >\r\n            {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n        </Button>\r\n    );\r\n};\r\nexport default ExampleTasksButton;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Input from \"../../Input\";\r\nimport { selectQuery, setQuery } from \"../../tasksSlice\";\r\n\r\nconst Search = () => {\r\n    const query = useSelector(selectQuery);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Input\r\n            placeholder=\"Filtruj zadania\"\r\n            value={query}\r\n            onChange={({ target }) => dispatch(setQuery(target.value))}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./../../../common/Section\";\r\nimport Header from \"./../../../common/Header\";\r\nimport Container from \"./../../../common/Container\";\r\nimport ExampleTasksButton from \"./ExampleTasksButton/index\"\r\nimport Search from \"./Search\";\r\n\r\nconst TasksPage = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        extraHeaderContent={<ExampleTasksButton />}\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        extraHeaderContent={<Buttons />}\r\n        body={<TasksList />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default TasksPage;","import React from 'react';\r\nimport Section from \"./../../../common/Section\";\r\nimport Header from \"./../../../common/Header\";\r\nimport Container from \"./../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            {task\r\n                ? (\r\n                    <Section\r\n                        title={task.name}\r\n                        body={\r\n                            <>\r\n                                <strong>Ukończono:</strong>\r\n                                {task.done ? \" Tak\" : \" Nie\"}\r\n                            </>\r\n                        }\r\n                    />\r\n                )\r\n                : (\r\n                    <Section\r\n                        title=\"Nie ma takiego zadania na liście\"\r\n                    />\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\nexport default TaskPage;","import React from 'react';\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst AuthorPage = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"O Autorze\" />\r\n      <Section\r\n        title=\"Kalina Jakubowska\"\r\n        body=\"Hej! Jak zapewne się domyślasz, lubię miziać koty.\r\n        Nie lubię za to pisać o sobie, także ten... miłego dnia!\r\n        A jeżeli masz jakiegoś kota pod ręką - wiesz co robić 😁\"\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default AuthorPage;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        text-decoration: none;\r\n        background-color: ${({ theme }) => theme.color.buttonBackground};\r\n        color: ${({ theme }) => theme.color.sectionBackground};\r\n        padding: 10px;\r\n\r\n        &.${activeClassName} {\r\n            filter: brightness(90%);\r\n        }\r\n    `\r\nexport const Nav = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.buttonBackground};\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 0 auto;\r\n    padding: 0;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mini}px) {\r\n        flex-direction: column;\r\n        align-items: center\r\n    }\r\n`\r\nexport const NavItem = styled.li`\r\n    list-style: none;\r\n    padding: 20px;\r\n`\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme, darkTheme } from \"./theme.js\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectDarkTheme } from \"./common/themeSlice\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { StyledNavLink, Nav, NavItem } from \"./styled.js\";\r\nconst App = () => {\r\n    const isDarkTheme = useSelector(selectDarkTheme);\r\n\r\n    return (\r\n        <ThemeProvider theme={isDarkTheme ? darkTheme : theme}>\r\n            <GlobalStyle />\r\n            <HashRouter>\r\n                <nav>\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <StyledNavLink to=\"/zadania\">\r\n                                Zadania\r\n                            </StyledNavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <StyledNavLink to=\"/o-autorze\">\r\n                                O autorze\r\n                            </StyledNavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <Switch>\r\n                        <Route path=\"/zadania/:id\">\r\n                            <TaskPage />\r\n                        </Route>\r\n                        <Route path=\"/zadania\">\r\n                            <TasksPage />\r\n                        </Route>\r\n                        <Route path=\"/o-autorze\">\r\n                            <AuthorPage />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Redirect to=\"/zadania\" />\r\n                        </Route>\r\n                    </Switch>\r\n                </nav>\r\n            </HashRouter>\r\n        </ThemeProvider>\r\n    )\r\n};\r\nexport default App;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, delay, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, addTasks, setExampleTasksLoading, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./TasksPage/TasksList/getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setExampleTasksLoading(true));\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(addTasks(exampleTasks));\r\n        yield put(setExampleTasksLoading(false));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n        yield put(setExampleTasksLoading(false));\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* watchFetchExampleTasks() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n};\r\n\r\nexport function* watchAllActions() {\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { watchFetchExampleTasks, watchAllActions } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchExampleTasks(),\r\n        watchAllActions(),\r\n    ])\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./common/themeSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"theme\", JSON.stringify(store.getState().theme.darkTheme));\r\n});\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}