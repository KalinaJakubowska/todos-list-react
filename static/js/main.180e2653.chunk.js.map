{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","store.js","index.js"],"names":["FormSheet","styled","form","Input","input","Button","button","tasksSlice","createSlice","name","initialState","tasks","JSON","parse","localStorage","getItem","isHidingEnabled","reducers","addTask","payload","push","toggleIsHidingEnabled","state","toggleTaskDone","index","findIndex","task","id","done","deleteTask","filter","doAllTasks","map","actions","selectTasks","Form","useState","newTaskName","setNewTaskName","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","nanoid","current","focus","ref","value","onChange","target","autoFocus","placeholder","List","ul","Item","li","hidden","css","Content","span","toggleDone","remove","TasksList","useSelector","length","key","onClick","ButtonsContainer","div","Buttons","disabled","every","Wrapper","section","Title","h2","Container","Body","Section","title","extraHeaderContent","body","Header","Main","main","children","App","Tasks","Boolean","window","location","hostname","match","store","configureStore","reducer","tasksReducer","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.180e2653.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const FormSheet = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\nexport const Input = styled.input`\r\n    height: 55px;\r\n    border: 3px solid #eee;\r\n    padding: 10px;\r\n`\r\nexport const Button = styled.button`\r\n    height: 55px;\r\n    font-size: 20px;\r\n    background-color: teal;\r\n    color: white;\r\n    border: none;\r\n    padding: 15px;\r\n    transition: background 0.3s, transform 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: hsl(180, 100%, 35%);\r\n        transform: scale(1.1);\r\n    }\r\n`","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: JSON.parse(localStorage.getItem(\"tasks\")) || [],\r\n        isHidingEnabled: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleIsHidingEnabled: state => {\r\n            state.isHidingEnabled = !state.isHidingEnabled;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteTask: (state, { payload }) => {\r\n            state.tasks = state.tasks.filter(task => task.id !== payload);\r\n        },\r\n        doAllTasks: (state) => {\r\n            state.tasks = state.tasks.map(task => ({ ...task, done: true }));\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleIsHidingEnabled, toggleTaskDone, deleteTask, doAllTasks } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { FormSheet, Input, Button } from \"./styled\"\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        dispatch(addTask({\r\n            name: newTaskName.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskName(\"\");\r\n        focusInput();\r\n    }\r\n\r\n    return (\r\n        <FormSheet onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n                autoFocus\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormSheet>\r\n    )\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n`;\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid #eee;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    transition: background 0.3s;\r\n    color: white;\r\n    font-size: 22px;\r\n    padding: 0px;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: green;\r\n\r\n        &:hover {\r\n            background-color: hsl(120, 100%, 35%);\r\n        }\r\n        &:active {\r\n            background-color: hsl(120, 100%, 45%);\r\n        }\r\n    `}\r\n    ${({ remove }) => remove && css`\r\n        background-color: red;\r\n\r\n        &:hover {\r\n            background-color: hsl(0, 100%, 65%);\r\n        }\r\n        &:active {\r\n            background-color: hsl(0, 100%, 75%);\r\n        }\r\n    `}\r\n`","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled.js\";\r\nimport { selectTasks, toggleTaskDone, deleteTask } from \"../tasksSlice.js\";\r\n\r\nconst TasksList = () => {\r\n    const { tasks, isHidingEnabled } = useSelector(selectTasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (!tasks.length) {\r\n        return (\r\n            <p>\r\n                Aktualnie nie masz żadnych zadań do wykonania. Ciesz się wolnym czasem :)\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({ id, name, done }) => (\r\n                <Item\r\n                    key={id}\r\n                    hidden={done && isHidingEnabled}\r\n                >\r\n                    <Button toggleDone onClick={() => dispatch(toggleTaskDone(id))}>\r\n                        {done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={done}>\r\n                        {name}\r\n                    </Content>\r\n                    <Button remove onClick={() => dispatch(deleteTask(id))}>\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 20px;\r\n    color: teal;\r\n    transition: color 0.3s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 767px) {\r\n        padding: 15px;\r\n    }\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:active {\r\n        color: hsl(180, 100%, 45%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\nimport { selectTasks, toggleIsHidingEnabled, doAllTasks } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, isHidingEnabled } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => !done)}\r\n                        onClick={() => dispatch(toggleIsHidingEnabled())}\r\n                    >\r\n                        {isHidingEnabled ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                        onClick={() => dispatch(doAllTasks())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsContainer>\r\n    );\r\n};\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: #fff;\r\n    margin-bottom: 15px;\r\n    box-shadow: 0 0 5px #ccc;\r\n`;\r\nexport const Title = styled.h2`\r\n    padding: 20px;\r\n    margin: 0;\r\n`;\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n    border-top: 3px solid #eee;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Title, Container, Body } from \"./styled.js\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <Wrapper>\r\n        <Container>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n)\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n)\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    width: 1100px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n`","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n)\r\nexport default Container;","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        extraHeaderContent={\r\n          <Buttons />\r\n        }\r\n        body={\r\n          <TasksList />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default App;","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => < Tasks />;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(store.getState().tasks.tasks));\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}