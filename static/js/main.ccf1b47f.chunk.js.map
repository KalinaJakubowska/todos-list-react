{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","useTasks.js","serviceWorker.js","index.js"],"names":["FormSheet","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskName","setNewTaskName","inputRef","useRef","onSubmit","event","preventDefault","trim","current","focus","ref","value","onChange","target","autoFocus","placeholder","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","remove","Tasks","tasks","isHidingEnabled","deleteTask","toggleTaskDone","length","map","id","name","key","onClick","ButtonsContainer","div","Buttons","toggleIsHidingEnabled","doAllTasks","disabled","every","Wrapper","section","Title","h2","Container","Body","Section","title","extraHeaderContent","body","Header","Main","main","children","App","setIsHidingEnabled","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","task","useTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ccf1b47f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const FormSheet = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\nexport const Input = styled.input`\r\n    height: 55px;\r\n    border: 3px solid #eee;\r\n    padding: 10px;\r\n`\r\nexport const Button = styled.button`\r\n    height: 55px;\r\n    font-size: 20px;\r\n    background-color: teal;\r\n    color: white;\r\n    border: none;\r\n    padding: 15px;\r\n    transition: background 0.3s, transform 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: hsl(180, 100%, 35%);\r\n        transform: scale(1.1);\r\n    }\r\n`","import React, { useState, useRef } from \"react\";\r\nimport {FormSheet, Input, Button} from \"./styled\"\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskName.trim());\r\n        setNewTaskName(\"\");\r\n        focusInput();\r\n    }\r\n\r\n    return (\r\n        <FormSheet onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n                autoFocus\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormSheet>\r\n    )\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n`;\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid #eee;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    transition: background 0.3s;\r\n    color: white;\r\n    font-size: 22px;\r\n    padding: 0px;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: green;\r\n\r\n        &:hover {\r\n            background-color: hsl(120, 100%, 35%);\r\n        }\r\n        &:active {\r\n            background-color: hsl(120, 100%, 45%);\r\n        }\r\n    `}\r\n    ${({ remove }) => remove && css`\r\n        background-color: red;\r\n\r\n        &:hover {\r\n            background-color: hsl(0, 100%, 65%);\r\n        }\r\n        &:active {\r\n            background-color: hsl(0, 100%, 75%);\r\n        }\r\n    `}\r\n`","import React from \"react\";\r\nimport { List, Item, Content, Button } from \"./styled.js\";\r\n\r\nconst Tasks = ({ tasks, isHidingEnabled, deleteTask, toggleTaskDone }) => {\r\n    if (!tasks.length) {\r\n        return (\r\n            <p>\r\n                Aktualnie nie masz Å¼adnych zadaÅ„ do wykonania. Ciesz siÄ™ wolnym czasem :)\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({ id, name, done }) => (\r\n                <Item\r\n                    key={id}\r\n                    hidden={done && isHidingEnabled}\r\n                >\r\n                    <Button toggleDone onClick={() => toggleTaskDone(id)}>\r\n                        {done ? \"âœ”\" : \"\"}\r\n                    </Button>\r\n                    <Content done={done}>\r\n                        {name}\r\n                    </Content>\r\n                    <Button remove onClick={() => deleteTask(id)}>\r\n                        ðŸ—‘\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 20px;\r\n    color: teal;\r\n    transition: color 0.3s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 767px) {\r\n        padding: 15px;\r\n    }\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:active {\r\n        color: hsl(180, 100%, 45%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n    }\r\n`;","import React from \"react\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, isHidingEnabled, toggleIsHidingEnabled, doAllTasks }) => (\r\n    <ButtonsContainer>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button\r\n                    disabled={tasks.every(({ done }) => !done)}\r\n                    onClick={toggleIsHidingEnabled}\r\n                >\r\n                    {isHidingEnabled ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n                </Button>\r\n                <Button\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={doAllTasks}\r\n                >\r\n                    UkoÅ„cz wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </ButtonsContainer>\r\n);\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: #fff;\r\n    margin-bottom: 15px;\r\n    box-shadow: 0 0 5px #ccc;\r\n`;\r\nexport const Title = styled.h2`\r\n    padding: 20px;\r\n    margin: 0;\r\n`;\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n    border-top: 3px solid #eee;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Title, Container, Body } from \"./styled.js\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <Wrapper>\r\n        <Container>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n)\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n)\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    width: 1100px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n`","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n)\r\nexport default Container;","import React, { useState } from 'react';\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\nimport { useTasks } from \"./useTasks\"\r\n\r\nfunction App() {\r\n  const [isHidingEnabled, setIsHidingEnabled] = useState(false);\r\n\r\n  const toggleIsHidingEnabled = () => {\r\n    setIsHidingEnabled(isHidingEnabled => !isHidingEnabled);\r\n  };\r\n\r\n  const {\r\n    tasks,\r\n    deleteTask,\r\n    toggleTaskDone,\r\n    doAllTasks,\r\n    addNewTask,\r\n  } = useTasks();\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadaÅ„\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            isHidingEnabled={isHidingEnabled}\r\n            toggleIsHidingEnabled={toggleIsHidingEnabled}\r\n            doAllTasks={doAllTasks}\r\n          />\r\n        }\r\n        body={\r\n          <Tasks\r\n            tasks={tasks}\r\n            isHidingEnabled={isHidingEnabled}\r\n            deleteTask={deleteTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default App;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] =\r\n        useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks))\r\n    }, [tasks]);\r\n\r\n    const deleteTask = id => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n    const toggleTaskDone = id => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done }\r\n            }\r\n\r\n            return task\r\n        }));\r\n    };\r\n    const doAllTasks = () => {\r\n        setTasks(tasks => tasks.map(task => ({ ...task, done: true })));\r\n    };\r\n    const addNewTask = (name) => {\r\n        if (!name) {\r\n            return;\r\n        }\r\n\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                name,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        deleteTask,\r\n        toggleTaskDone,\r\n        doAllTasks,\r\n        addNewTask,\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}