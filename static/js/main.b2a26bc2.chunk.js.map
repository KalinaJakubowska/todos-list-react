{"version":3,"sources":["theme.js","GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","themeSlice.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","store.js","serviceWorker.js","index.js"],"names":["theme","color","buttonBackground","sectionBackground","shadow","background","transparent","check","remove","interactionButtonText","text","breakpoint","mobileMax","mini","darkTheme","GlobalStyle","createGlobalStyle","FormSheet","styled","form","Input","input","Button","button","tasksSlice","createSlice","name","initialState","tasks","JSON","parse","localStorage","getItem","isHidingEnabled","reducers","addTask","payload","push","toggleIsHidingEnabled","state","toggleTaskDone","index","findIndex","task","id","done","deleteTask","filter","doAllTasks","map","removeAllTasks","actions","selectTasks","Form","useState","newTaskName","setNewTaskName","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trim","nanoid","ref","value","onChange","target","autoFocus","placeholder","List","ul","Item","li","hidden","css","Content","span","toggleDone","TasksList","useSelector","length","key","onClick","ButtonsContainer","div","Buttons","disabled","every","Wrapper","section","Title","h2","Container","Body","Section","title","extraHeaderContent","body","themeSlice","toggleTheme","selectTheme","header","Header","isDarkTheme","Main","main","children","Tasks","App","store","configureStore","reducer","tasksReducer","themeReducer","subscribe","setItem","stringify","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2a26bc2.chunk.js","sourcesContent":["export const theme = {\r\n    color: {\r\n        buttonBackground: \"teal\",\r\n        sectionBackground: \"#fff\",\r\n        shadow: \"#ccc\",\r\n        background: \"#eee\",\r\n        transparent: \"transparent\",\r\n        check: \"green\",\r\n        remove: \"red\",\r\n        interactionButtonText: \"#fff\",\r\n        text: \"black\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        mini: 375,\r\n    },\r\n}\r\n\r\nexport const darkTheme = {\r\n    color: {\r\n        buttonBackground: \"#8DB9B9\",\r\n        sectionBackground: \"#3C4453\",\r\n        shadow: \"black\",\r\n        background: \"#272A30\",\r\n        transparent: \"transparent\",\r\n        check: \"green\",\r\n        remove: \"red\",\r\n        interactionButtonText: \"#fff\",\r\n        text: \"#EBEDEF\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        mini: 375,\r\n    },\r\n}","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::before, ::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        color: ${({ theme }) => theme.color.text};\r\n        background-color: ${({ theme }) => theme.color.background};\r\n        font-size: 16px;\r\n        padding: 10px;\r\n        transition: 0.3s;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const FormSheet = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\nexport const Input = styled.input`\r\n    height: 55px;\r\n    border: 3px solid ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    color: ${({ theme }) => theme.color.text};\r\n`\r\nexport const Button = styled.button`\r\n    height: 55px;\r\n    font-size: 20px;\r\n    background-color: ${({ theme }) => theme.color.buttonBackground};\r\n    color: ${({ theme }) => theme.color.sectionBackground};\r\n    border: none;\r\n    padding: 15px;\r\n    transition: background 0.3s, transform 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n`","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: JSON.parse(localStorage.getItem(\"tasks\")) || [],\r\n        isHidingEnabled: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleIsHidingEnabled: state => {\r\n            state.isHidingEnabled = !state.isHidingEnabled;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteTask: (state, { payload }) => {\r\n            state.tasks = state.tasks.filter(task => task.id !== payload);\r\n        },\r\n        doAllTasks: (state) => {\r\n            state.tasks = state.tasks.map(task => ({ ...task, done: true }));\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleIsHidingEnabled,\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    doAllTasks,\r\n    removeAllTasks\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { FormSheet, Input, Button } from \"./styled\"\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        focusInput();\r\n\r\n        if (!newTaskName.trim()) {\r\n            return 0;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            name: newTaskName.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskName(\"\");\r\n    }\r\n\r\n    return (\r\n        <FormSheet onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n                autoFocus\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormSheet>\r\n    )\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n`;\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid ${({ theme }) => theme.color.background};\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    transition: background 0.3s;\r\n    color: ${({ theme }) => theme.color.interactionButtonText};\r\n    font-size: 22px;\r\n    padding: 0px;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.check};\r\n\r\n        &:hover {\r\n            background-color: hsl(120, 100%, 35%);\r\n        }\r\n        &:active {\r\n            background-color: hsl(120, 100%, 45%);\r\n        }\r\n    `}\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n\r\n        &:hover {\r\n            background-color: hsl(0, 100%, 65%);\r\n        }\r\n        &:active {\r\n            background-color: hsl(0, 100%, 75%);\r\n        }\r\n    `}\r\n`","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled.js\";\r\nimport { selectTasks, toggleTaskDone, deleteTask } from \"../tasksSlice.js\";\r\n\r\nconst TasksList = () => {\r\n    const { tasks, isHidingEnabled } = useSelector(selectTasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (!tasks.length) {\r\n        return (\r\n            <p>\r\n                Aktualnie nie masz żadnych zadań do wykonania. Ciesz się wolnym czasem :)\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({ id, name, done }) => (\r\n                <Item\r\n                    key={id}\r\n                    hidden={done && isHidingEnabled}\r\n                >\r\n                    <Button toggleDone onClick={() => dispatch(toggleTaskDone(id))}>\r\n                        {done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={done}>\r\n                        {name}\r\n                    </Content>\r\n                    <Button remove onClick={() => dispatch(deleteTask(id))}>\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.transparent};\r\n    border: none;\r\n    padding: 20px;\r\n    color: ${({ theme }) => theme.color.buttonBackground};\r\n    transition: color 0.3s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        padding: 15px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.shadow};\r\n        cursor: unset;\r\n        filter: none;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\nimport { selectTasks, toggleIsHidingEnabled, doAllTasks, removeAllTasks } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, isHidingEnabled } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => !done)}\r\n                        onClick={() => dispatch(toggleIsHidingEnabled())}\r\n                    >\r\n                        {isHidingEnabled ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                        onClick={() => dispatch(doAllTasks())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(removeAllTasks())}\r\n                    >\r\n                        Usuń wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsContainer>\r\n    );\r\n};\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: ${({ theme }) => theme.color.sectionBackground};\r\n    margin-bottom: 15px;\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.shadow};\r\n`;\r\nexport const Title = styled.h2`\r\n    padding: 20px;\r\n    margin: 0;\r\n`;\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n    border-top: 3px solid ${({ theme }) => theme.color.background};\r\n`;","import React from \"react\";\r\nimport { Wrapper, Title, Container, Body } from \"./styled.js\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <Wrapper>\r\n        <Container>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n)\r\nexport default Section;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        darkTheme: JSON.parse(localStorage.getItem(\"theme\")) || false,\r\n    },\r\n    reducers: {\r\n        toggleTheme: (state) => {\r\n            state.darkTheme = !state.darkTheme;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\nexport const selectTheme = state => state.theme.darkTheme;\r\nexport default themeSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mini}px ) {\r\n        flex-direction: column;\r\n        margin-bottom: 20px;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: ${({ theme }) => theme.color.sectionBackground};\r\n    color: ${({ theme }) => theme.color.text};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.shadow};\r\n    font-size: 1em;\r\n    display: block;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n`","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTheme, selectTheme } from \"../../themeSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Header = ({ title }) => {\r\n    const isDarkTheme = useSelector(selectTheme);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Wrapper>\r\n            <h1>{title}</h1>\r\n            <Button onClick={() => dispatch(toggleTheme())}>\r\n                {isDarkTheme ? \"Jasny motyw\" : \"Ciemny motyw\"}\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    width: 1100px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n`","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n)\r\nexport default Container;","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst Tasks = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        extraHeaderContent={\r\n          <Buttons />\r\n        }\r\n        body={\r\n          <TasksList />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default Tasks;","import React from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme, darkTheme } from \"./theme.js\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTheme } from \"./themeSlice.js\";\r\n\r\nconst App = () => {\r\n    const isDarkTheme = useSelector(selectTheme);\r\n\r\n    return (\r\n        <ThemeProvider theme={isDarkTheme ? darkTheme : theme}>\r\n            <GlobalStyle />\r\n            < Tasks />\r\n        </ThemeProvider>\r\n    )\r\n};\r\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./themeSlice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n});\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(store.getState().tasks.tasks));\r\n    localStorage.setItem(\"theme\", JSON.stringify(store.getState().theme.darkTheme));\r\n});\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}