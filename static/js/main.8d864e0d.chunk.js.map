{"version":3,"sources":["theme.js","GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/themeSlice.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","styled.js","App.js","features/tasks/TasksPage/TasksList/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","serviceWorker.js","index.js"],"names":["theme","color","buttonBackground","sectionBackground","shadow","background","transparent","check","remove","edit","outline","interactionButtonText","text","breakpoint","mobileMax","mini","darkTheme","GlobalStyle","createGlobalStyle","FormSheet","styled","form","Button","button","tasksSlice","createSlice","name","initialState","tasks","JSON","parse","localStorage","getItem","isHidingEnabled","exampleTasksLoading","query","reducers","addTasks","payload","forEach","task","push","toggleTaskDone","index","findIndex","id","done","deleteTask","state","filter","doAllTasks","map","removeAllTasks","toggleIsHidingEnabled","editTask","fetchExampleTasks","setExampleTasksLoading","setQuery","actions","selectTasks","selectIsHidingEnabled","selectExampleTasksLoading","selectQuery","areAllTasksDone","every","areAllTasksUndone","input","Form","useState","newTaskName","setNewTaskName","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","current","focus","trim","nanoid","Input","ref","value","onChange","target","autoFocus","placeholder","List","ul","Item","li","hidden","css","Content","span","toggleDone","save","EditableContent","div","ContentInput","StyledLink","Link","TasksList","useSelector","toLowerCase","includes","selectTasksByQuery","editableId","setEditableId","length","key","onClick","as","undefined","onEditSave","to","onEditButtonClick","ButtonsContainer","Buttons","isAllDone","isAllUndone","disabled","Wrapper","section","Title","h2","Container","Body","Section","title","extraHeaderContent","body","themeSlice","toggleTheme","selectDarkTheme","header","Header","isDarkTheme","Main","main","children","ExampleTasksButton","loading","Search","TasksPage","TaskPage","useParams","taskId","find","getTaskById","AuthorPage","StyledNavLink","NavLink","attrs","activeClassName","Navigation","NavItem","App","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","watchFetchExampleTasks","put","delay","call","exampleTasks","alert","takeLatest","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","themeReducer","middleware","run","subscribe","setItem","stringify","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d864e0d.chunk.js","sourcesContent":["export const theme = {\r\n    color: {\r\n        buttonBackground: \"#008080\",\r\n        sectionBackground: \"#fff\",\r\n        shadow: \"#ccc\",\r\n        background: \"#eee\",\r\n        transparent: \"transparent\",\r\n        check: \"#008000\",\r\n        remove: \"#ff0000\",\r\n        edit: \"#ffa500\",\r\n        outline: \"#000\",\r\n        interactionButtonText: \"#fff\",\r\n        text: \"#000\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        mini: 375,\r\n    },\r\n}\r\n\r\nexport const darkTheme = {\r\n    ...theme,\r\n    color: {\r\n        buttonBackground: \"#6CAAE0\",\r\n        sectionBackground: \"#3C4453\",\r\n        shadow: \"#000\",\r\n        background: \"#272A30\",\r\n        transparent: \"transparent\",\r\n        check: \"#008000\",\r\n        remove: \"#f00\",\r\n        edit: \"#ffa500\",\r\n        outline: \"#808080\",\r\n        interactionButtonText: \"#fff\",\r\n        text: \"#EBEDEF\",\r\n    },\r\n}","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        background-color: ${({ theme }) => theme.color.background};\r\n    }\r\n\r\n    *, ::before, ::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    :focus {\r\n        outline: 2px solid ${({ theme }) => theme.color.outline};\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        color: ${({ theme }) => theme.color.text};\r\n        font-size: 16px;\r\n        background-color: ${({ theme }) => theme.color.background};\r\n        transition: background 0.3s;\r\n        height: 100vh;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const FormSheet = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\nexport const Button = styled.button`\r\n    height: 55px;\r\n    font-size: 20px;\r\n    background-color: ${({ theme }) => theme.color.buttonBackground};\r\n    color: ${({ theme }) => theme.color.sectionBackground};\r\n    border: none;\r\n    padding: 15px;\r\n    transition: background 0.3s, transform 0.3s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n`","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: JSON.parse(localStorage.getItem(\"tasks\")) || [],\r\n        isHidingEnabled: false,\r\n        exampleTasksLoading: false,\r\n        query: \"\",\r\n    },\r\n    reducers: {\r\n        addTasks: ({ tasks }, { payload }) => {\r\n            payload.forEach(task => tasks.push(task));\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteTask: (state, { payload }) => {\r\n            state.tasks = state.tasks.filter(task => task.id !== payload);\r\n        },\r\n        doAllTasks: (state) => {\r\n            state.tasks = state.tasks.map(task => ({ ...task, done: true }));\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        },\r\n        toggleIsHidingEnabled: state => {\r\n            state.isHidingEnabled = !state.isHidingEnabled;\r\n        },\r\n        editTask: ({ tasks }, { payload: { id, name } }) => {\r\n            const index = tasks.findIndex(task => task.id === id);\r\n            tasks[index].name = name;\r\n        },\r\n        fetchExampleTasks: () => {\r\n        },\r\n        setExampleTasksLoading: (state, { payload }) => {\r\n            state.exampleTasksLoading = payload;\r\n        },\r\n        setQuery: (state, { payload: query }) => {\r\n            state.query = query;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTasks,\r\n    toggleIsHidingEnabled,\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    doAllTasks,\r\n    removeAllTasks,\r\n    editTask,\r\n    fetchExampleTasks,\r\n    setExampleTasksLoading,\r\n    setQuery,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks.tasks;\r\nexport const selectIsHidingEnabled = state => state.tasks.isHidingEnabled;\r\nexport const selectExampleTasksLoading = state => state.tasks.exampleTasksLoading;\r\nexport const getTaskById = (state, taskId) => {\r\n    return selectTasks(state).find(({ id }) => id === taskId);\r\n};\r\nexport const selectQuery = state => state.tasks.query;\r\nexport const selectTasksByQuery = (state, query) => {\r\n    if (!query || query.trim() === \"\") {\r\n        return selectTasks(state);\r\n    }\r\n\r\n    return selectTasks(state).filter(\r\n        ({ name }) => name.toLowerCase().includes(query.trim().toLowerCase())\r\n    );\r\n};\r\nexport const areAllTasksDone = ({ tasks }) => {\r\n    return tasks.tasks.every(({ done }) => done);\r\n};\r\nexport const areAllTasksUndone = ({ tasks }) => {\r\n    return tasks.tasks.every(({ done }) => !done);\r\n};\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    width: 100%;\r\n    height: 55px;\r\n    border: 3px solid ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    color: ${({ theme }) => theme.color.text};\r\n    border: 1px solid ${({ theme }) => theme.color.shadow};\r\n`","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FormSheet, Button } from \"./styled\"\r\nimport { addTasks } from \"./../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    }\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        focusInput();\r\n\r\n        if (!newTaskName.trim()) {\r\n            return 0;\r\n        }\r\n\r\n        dispatch(addTasks([\r\n            {\r\n                name: newTaskName.trim(),\r\n                done: false,\r\n                id: nanoid(),\r\n            },\r\n        ]));\r\n        setNewTaskName(\"\");\r\n    }\r\n\r\n    return (\r\n        <FormSheet onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n                autoFocus\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormSheet>\r\n    )\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: 0;\r\n    margin: 0;\r\n`;\r\nexport const Item = styled.li`\r\n    border-bottom: 3px solid ${({ theme }) => theme.color.background};\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto ;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    color: ${({ theme }) => theme.color.interactionButtonText};\r\n    font-size: 22px;\r\n    padding: 0px;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.check};\r\n    `}\r\n    ${({ edit }) => edit && css`\r\n        background-color: ${({ theme }) => theme.color.edit};\r\n    `}\r\n    ${({ save }) => save && css`\r\n        background-color: ${({ theme }) => theme.color.edit};\r\n        font-size: unset;\r\n        width: unset;\r\n        padding: 0px 10px;\r\n    `}\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n`;\r\nexport const EditableContent = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n`;\r\nexport const ContentInput = styled.input`\r\n    width: 100%;\r\n    padding: 5px;\r\n    border: 1px solid ${({ theme }) => theme.color.shadow};\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    color: ${({ theme }) => theme.color.text};\r\n`;\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.color.buttonBackground};\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n`;","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    List,\r\n    Item,\r\n    Content,\r\n    Button,\r\n    EditableContent,\r\n    ContentInput,\r\n    StyledLink\r\n} from \"./styled.js\";\r\nimport {\r\n    selectTasksByQuery,\r\n    selectIsHidingEnabled,\r\n    toggleTaskDone,\r\n    deleteTask,\r\n    editTask,\r\n    selectQuery,\r\n} from \"../../tasksSlice.js\";\r\n\r\nconst TasksList = () => {\r\n    const query = useSelector(selectQuery);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const isHidingEnabled = useSelector(selectIsHidingEnabled);\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n    const [editableId, setEditableId] = useState(0);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (!tasks.length) {\r\n        return (\r\n            <p>\r\n                {query\r\n                    ? \"Brak pasujących zadań.\"\r\n                    : \"Aktualnie nie masz żadnych zadań do wykonania. Ciesz się wolnym czasem :)\"\r\n                }\r\n            </p>\r\n        );\r\n    };\r\n\r\n    const onEditSave = (id, name) => {\r\n        dispatch(editTask({\r\n            name: newTaskName.trim() || name,\r\n            id,\r\n        }));\r\n\r\n        setEditableId(undefined);\r\n    };\r\n\r\n    const onEditButtonClick = (id, name) => {\r\n        setEditableId(id);\r\n        setNewTaskName(name)\r\n    };\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({ id, name, done }) => (\r\n                <Item\r\n                    key={id}\r\n                    hidden={done && isHidingEnabled}\r\n                >\r\n                    <Button toggleDone onClick={() => dispatch(toggleTaskDone(id))}>\r\n                        {done ? \"✔\" : \"\"}\r\n                    </Button>\r\n\r\n                    {editableId === id\r\n                        ? (\r\n                            <EditableContent as=\"form\">\r\n                                <ContentInput\r\n                                    autoFocus\r\n                                    value={newTaskName}\r\n                                    onChange={({ target }) => setNewTaskName(target.value)}\r\n                                />\r\n                                <Button save onClick={() => onEditSave(id, name)}>\r\n                                    Zapisz\r\n                                </Button>\r\n                            </EditableContent>\r\n                        )\r\n                        : (\r\n                            <EditableContent>\r\n                                <Content done={done}>\r\n                                    <StyledLink to={`/zadania/${id}`}>{name}</StyledLink>\r\n                                </Content>\r\n                                <Button edit onClick={() => onEditButtonClick(id, name)}>\r\n                                    ✏\r\n                                </Button>\r\n                            </EditableContent>\r\n                        )\r\n                    }\r\n\r\n                    < Button remove onClick={() => dispatch(deleteTask(id))}>\r\n                        🗑\r\n                    </Button >\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        margin-bottom: 20px;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    background-color: ${({ theme }) => theme.color.transparent};\r\n    border: none;\r\n    padding: 20px;\r\n    color: ${({ theme }) => theme.color.buttonBackground};\r\n    transition: 0.3s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        padding: 15px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(140%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.shadow};\r\n        cursor: unset;\r\n        filter: none;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer } from \"./styled\";\r\nimport { Button } from \"../../Button\";\r\nimport {\r\n    selectTasks,\r\n    selectIsHidingEnabled,\r\n    toggleIsHidingEnabled,\r\n    doAllTasks,\r\n    removeAllTasks,\r\n    areAllTasksDone,\r\n    areAllTasksUndone,\r\n} from \"./../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const isHidingEnabled = useSelector(selectIsHidingEnabled);\r\n    const isAllDone = useSelector(areAllTasksDone);\r\n    const isAllUndone = useSelector(areAllTasksUndone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsContainer>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        disabled={isAllUndone}\r\n                        onClick={() => dispatch(toggleIsHidingEnabled())}\r\n                    >\r\n                        {isHidingEnabled ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={isAllDone}\r\n                        onClick={() => dispatch(doAllTasks())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(removeAllTasks())}\r\n                    >\r\n                        Usuń wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsContainer>\r\n    );\r\n};\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background: ${({ theme }) => theme.color.sectionBackground};\r\n    margin-bottom: 15px;\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.shadow};\r\n`;\r\nexport const Title = styled.h2`\r\n    padding: 20px;\r\n    margin: 0;\r\n`;\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n    border-top: 3px solid ${({ theme }) => theme.color.background};\r\n`;","import React from \"react\";\r\nimport { Wrapper, Title, Container, Body } from \"./styled.js\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <Wrapper>\r\n        <Container>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n)\r\nexport default Section;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        darkTheme: JSON.parse(localStorage.getItem(\"theme\")) || false,\r\n    },\r\n    reducers: {\r\n        toggleTheme: (state) => {\r\n            state.darkTheme = !state.darkTheme;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggleTheme } = themeSlice.actions;\r\nexport const selectDarkTheme = state => state.theme.darkTheme;\r\nexport default themeSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media(max-width: 1100px) {\r\n        padding: 0 10px;\r\n    }\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mini}px ) {\r\n        flex-direction: column;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: ${({ theme }) => theme.color.sectionBackground};\r\n    color: ${({ theme }) => theme.color.text};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.shadow};\r\n    font-size: 1em;\r\n    display: block;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTheme, selectDarkTheme } from \"../themeSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Header = ({ title }) => {\r\n    const isDarkTheme = useSelector(selectDarkTheme);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Wrapper>\r\n            <h1>{title}</h1>\r\n            <Button onClick={() => dispatch(toggleTheme())}>\r\n                {isDarkTheme ? \"Jasny motyw\" : \"Ciemny motyw\"}\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    width: 1100px;\r\n    max-width: 100%;\r\n    margin: 60px auto 0;\r\n`","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n)\r\nexport default Container;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"../../Button\";\r\nimport { fetchExampleTasks, selectExampleTasksLoading } from \"./../../tasksSlice\";\r\n\r\nconst ExampleTasksButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectExampleTasksLoading);\r\n\r\n    return (\r\n        <Button\r\n            onClick={() => dispatch(fetchExampleTasks())}\r\n            disabled={loading}\r\n        >\r\n            {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n        </Button>\r\n    );\r\n};\r\nexport default ExampleTasksButton;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Input from \"../../Input\";\r\nimport { selectQuery, setQuery } from \"../../tasksSlice\";\r\n\r\nconst Search = () => {\r\n    const query = useSelector(selectQuery);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Input\r\n            placeholder=\"Filtruj zadania\"\r\n            value={query}\r\n            onChange={({ target }) => dispatch(setQuery(target.value))}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./../../../common/Section\";\r\nimport Header from \"./../../../common/Header\";\r\nimport Container from \"./../../../common/Container\";\r\nimport ExampleTasksButton from \"./ExampleTasksButton/index\"\r\nimport Search from \"./Search\";\r\n\r\nconst TasksPage = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        extraHeaderContent={<ExampleTasksButton />}\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        extraHeaderContent={<Buttons />}\r\n        body={<TasksList />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default TasksPage;","import React from 'react';\r\nimport Section from \"./../../../common/Section\";\r\nimport Header from \"./../../../common/Header\";\r\nimport Container from \"./../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            {task\r\n                ? (\r\n                    <Section\r\n                        title={task.name}\r\n                        body={\r\n                            <>\r\n                                <strong>Ukończono:</strong>\r\n                                {task.done ? \" Tak\" : \" Nie\"}\r\n                            </>\r\n                        }\r\n                    />\r\n                )\r\n                : (\r\n                    <Section\r\n                        title=\"Nie ma takiego zadania na liście\"\r\n                    />\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\nexport default TaskPage;","import React from 'react';\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst AuthorPage = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"O Autorze\" />\r\n      <Section\r\n        title=\"Kalina Jakubowska\"\r\n        body=\"Hej! Jak zapewne się domyślasz, lubię miziać koty.\r\n        Nie lubię za to pisać o sobie, także ten... miłego dnia!\r\n        A jeżeli masz jakiegoś kota pod ręką - wiesz co robić 😁\"\r\n      />\r\n    </Container>\r\n  );\r\n};\r\nexport default AuthorPage;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n        text-decoration: none;\r\n        background-color: ${({ theme }) => theme.color.buttonBackground};\r\n        color: ${({ theme }) => theme.color.sectionBackground};\r\n        padding: 10px;\r\n\r\n        &.${activeClassName} {\r\n            filter: brightness(90%);\r\n        }\r\n    `\r\nexport const Navigation = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.buttonBackground};\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mini}px) {\r\n        flex-direction: column;\r\n        align-items: center\r\n    }\r\n`\r\nexport const NavItem = styled.li`\r\n    padding: 20px;\r\n`\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme, darkTheme } from \"./theme.js\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectDarkTheme } from \"./common/themeSlice\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { StyledNavLink, Navigation, NavItem } from \"./styled.js\";\r\nconst App = () => {\r\n    const isDarkTheme = useSelector(selectDarkTheme);\r\n\r\n    return (\r\n        <ThemeProvider theme={isDarkTheme ? darkTheme : theme}>\r\n            <GlobalStyle />\r\n            <HashRouter>\r\n                <nav>\r\n                    <Navigation>\r\n                        <NavItem>\r\n                            <StyledNavLink to=\"/zadania\">\r\n                                Zadania\r\n                            </StyledNavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <StyledNavLink to=\"/o-autorze\">\r\n                                O autorze\r\n                            </StyledNavLink>\r\n                        </NavItem>\r\n                    </Navigation>\r\n                    <Switch>\r\n                        <Route path=\"/zadania/:id\">\r\n                            <TaskPage />\r\n                        </Route>\r\n                        <Route path=\"/zadania\">\r\n                            <TasksPage />\r\n                        </Route>\r\n                        <Route path=\"/o-autorze\">\r\n                            <AuthorPage />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Redirect to=\"/zadania\" />\r\n                        </Route>\r\n                    </Switch>\r\n                </nav>\r\n            </HashRouter>\r\n        </ThemeProvider>\r\n    )\r\n};\r\nexport default App;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, addTasks, setExampleTasksLoading } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./TasksPage/TasksList/getExampleTasks\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setExampleTasksLoading(true));\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(addTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    } finally {\r\n        yield put(setExampleTasksLoading(false));\r\n    }\r\n};\r\n\r\nexport function* watchFetchExampleTasks() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchExampleTasks(),\r\n    ])\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./common/themeSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem(\"theme\", JSON.stringify(store.getState().theme.darkTheme));\r\n    localStorage.setItem(\"tasks\", JSON.stringify(store.getState().tasks.tasks))\r\n});\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}